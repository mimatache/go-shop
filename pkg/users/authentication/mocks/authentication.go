// Code generated by MockGen. DO NOT EDIT.
// Source: ./authentication.go

// Package mock_authentication is a generated GoMock package.
package mock_authentication

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRegistry is a mock of UserRegistry interface
type MockUserRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockUserRegistryMockRecorder
}

// MockUserRegistryMockRecorder is the mock recorder for MockUserRegistry
type MockUserRegistryMockRecorder struct {
	mock *MockUserRegistry
}

// NewMockUserRegistry creates a new mock instance
func NewMockUserRegistry(ctrl *gomock.Controller) *MockUserRegistry {
	mock := &MockUserRegistry{ctrl: ctrl}
	mock.recorder = &MockUserRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRegistry) EXPECT() *MockUserRegistryMockRecorder {
	return m.recorder
}

// GetPasswordFor mocks base method
func (m *MockUserRegistry) GetPasswordFor(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordFor", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordFor indicates an expected call of GetPasswordFor
func (mr *MockUserRegistryMockRecorder) GetPasswordFor(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordFor", reflect.TypeOf((*MockUserRegistry)(nil).GetPasswordFor), email)
}
